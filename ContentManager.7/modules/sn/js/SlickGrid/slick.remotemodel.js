
"use strict";

	// funzioni per la gestione di un remote data model
	// per l'uso all'interno della tabella
	
sn = window.sn || {};
sn.admin = sn.admin || {};

	// helper per la gestione degli eventi
	// (observer pattern)

sn.admin.eventhelper = function() {

	this.handlers = [];

	this.subscribe = function(fn) { this.handlers.push(fn); };
	this.notify = function(args) {
		
		args = args || {};
		for (var i = 0; i < this.handlers.length; i++)
			this.handlers[i].call(this, args);
    };

	return this;
};


	// data model

sn.admin.dm = function() {

		this.PAGESIZE = 50;

		this.data = {length: 0};
		this.clear();

		this.search = '';
//		var sortdir = 1;

//		this.h_request = null;
		this.req = null; // ajax request
//		this.req_page;

			// gestione degli eventi

		this.onDataLoading = new sn.admin.eventhelper(); //new EventHelper();
		this.onDataLoaded = new sn.admin.eventhelper(); //new EventHelper();

		this.init();
};

sn.admin.dm.prototype.init = function() {
	
};

sn.admin.dm.prototype.isDataLoaded = function(from, to) {

console.log('isDataLoaded', from, to);

	for (var i = from; i <= to; i++)
		if (data[i] == undefined || data[i] == null)
			return false;

	return true;
};

sn.admin.dm.prototype.clear = function() {

console.log('clear');

		// non posso semplicemente reinizializzare l'array
		// poiché viene usato dall'esterno

	var d = this.data;
	for (var k in d)
		delete d[k];

	d.length = 0;

	this.pages = {};
};

sn.admin.dm.prototype.ensureData = function(from, to) {

		// controlla se ci sono altre richieste in corso e, nel caso,
		// le interrompe

	if (this.req) {
				
		this.req.abort();
/*
		for (var i=req.fromPage; i<=req.toPage; i++)
			this.data[i*PAGESIZE] = undefined;
*/
	}

	if (from < 0)
		from = 0;

	var
		fromPage = Math.floor(from / this.PAGESIZE),
		toPage = Math.floor(to / this.PAGESIZE)
	;

console.log('ensureData', from, to, fromPage, toPage);

		// trim delle pagine se già caricate

	while (this.pages[fromPage] && fromPage < toPage)
		++fromPage;

	while (this.pages[toPage] && toPage > fromPage)
		--toPage;

	if (fromPage == toPage && this.pages[toPage]) {
		
			// TBD: lookahead ? 

		console.log('already have data', fromPage, toPage);
		
		return;
	}

	from = fromPage * this.PAGESIZE;
	to = (toPage + 1) * this.PAGESIZE - 1;

	console.log('doing request', from, to, fromPage, toPage);

	var
		url = sn.kFC + 'ajax/admin/list/users/' + from + '/' + to, // + p,
		pars = {
			ajax: true,
			search: this.search,
			u: new Date().valueOf()
		},
		me = this
	;

	this.onDataLoading.notify(/*{from:from, to:to}*/);

	this.req = $.getJSON(url, pars, function(data) { me.onSuccess(data); });
/*
	this.req.from = from;
	this.req.to = to;
	this.req.fromPage = fromPage;
	this.req.toPage = toPage;
*/

/*
			var url = "http://services.digg.com/search/stories?query=" + searchstr + "&offset=" + (fromPage * PAGESIZE) + "&count=" + (((toPage - fromPage) * PAGESIZE) + PAGESIZE) + "&appkey=http://slickgrid.googlecode.com&type=javascript";



			if (h_request != null)
				clearTimeout(h_request);

			h_request = setTimeout(function() {
				for (var i=fromPage; i<=toPage; i++)
					data[i*PAGESIZE] = null; // null indicates a 'requested but not available yet'

				onDataLoading.notify({from:from, to:to});

				req = $.jsonp({
					url: url,
					callbackParameter: "callback",
					cache: true, // Digg doesn't accept the autogenerated cachebuster param
					success: onSuccess,
					error: function(){
						onError(fromPage, toPage);
					}
					});
				req.fromPage = fromPage;
				req.toPage = toPage;
			}, 50);

*/
};

sn.admin.dm.prototype.onError = function(fromPage, toPage) {
	alert('error!');
};

sn.admin.dm.prototype.onSuccess = function(resp) {

	if (resp.data) {

		var
			from = resp.info.from,
			to = resp.info.to,
			fromPage = Math.floor(from / this.PAGESIZE),
			toPage = Math.floor(to / this.PAGESIZE)
		;

		this.data.length = resp.info.total;
		for (var i = from; i <= to; i++) {
			
			this.data[i] = resp.data[i];
			this.data[i].index = i;
		}

		for (var i = fromPage; i <= toPage; i++)
			this.pages[i] = true;

console.log('got data', from, to, fromPage, toPage, this.data, this.pages);

		this.onDataLoaded.notify({from: from, to: to});
	}

	this.req = null;

/*
	var
		from = resp.offset,
		to = resp.offset + resp.count
	;
	
	data.length = parseInt(resp.total, 10);

	for (var i = 0; i < resp.stories.length; i++) {

		data[from + i] = resp.stories[i];
		data[from + i].index = from + i;
	}
*/
};

sn.admin.dm.prototype.reloadData = function(from, to) {

console.log('reloadData', from, to);

	for (var i = from; i <= to; i++)
		delete data[i];

	this.ensureData(from, to);
};

sn.admin.dm.prototype.setSearch = function(s) {
	
	this.search = s;
	this.clear();
};
